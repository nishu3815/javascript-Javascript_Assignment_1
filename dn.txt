To implement the **Donor Service** models and `DbContext` file using **Entity Framework Core** in .NET, we will define the models and configure relationships between entities based on the schema described earlier.

### 1. **Models**

Here are the models for the Donor Service:

#### **User.cs** (From the Authentication Service)
Since the **Donor** entity will reference a **User** for donor identity, you will need this model. This is already part of the Authentication Service, but it’s needed for completeness in this example.

```csharp
public class User
{
    public int UserId { get; set; }
    public string Username { get; set; }
    public string Email { get; set; }
    public string PasswordHash { get; set; }
    public string PasswordSalt { get; set; }
    public int RoleId { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    // Navigation Properties
    public Role Role { get; set; }
    public Donor Donor { get; set; } // One-to-One relationship with Donor
}
```

#### **Role.cs** (From the Authentication Service)
Roles like Admin, Donor, etc., would reside here:

```csharp
public class Role
{
    public int RoleId { get; set; }
    public string Name { get; set; }

    // Navigation Properties
    public ICollection<User> Users { get; set; }
}
```

#### **Donor.cs** (Donor Service)
The `Donor` entity will reference a `User` and have additional fields specific to a donor.

```csharp
public class Donor
{
    public int DonorId { get; set; }
    public int UserId { get; set; }  // Foreign Key from User entity
    public string Name { get; set; }
    public int Age { get; set; }
    public int BloodTypeId { get; set; }  // Foreign Key from BloodType entity
    public string Phone { get; set; }
    public int HealthStatusId { get; set; }  // Foreign Key from HealthStatus entity
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    // Navigation Properties
    public User User { get; set; }  // Donor is linked to a User
    public BloodType BloodType { get; set; }
    public HealthStatus HealthStatus { get; set; }
    public ICollection<Donation> Donations { get; set; }
}
```

#### **BloodType.cs**
This stores blood types such as A+, O-, etc.

```csharp
public class BloodType
{
    public int BloodTypeId { get; set; }
    public string Type { get; set; }

    // Navigation Properties
    public ICollection<Donor> Donors { get; set; }
}
```

#### **HealthStatus.cs**
This tracks the donor’s health status, such as "Healthy", "Anemic", etc.

```csharp
public class HealthStatus
{
    public int HealthStatusId { get; set; }
    public string Status { get; set; }

    // Navigation Properties
    public ICollection<Donor> Donors { get; set; }
}
```

#### **Donation.cs**
The `Donation` entity tracks each blood donation, including date and quantity.

```csharp
public class Donation
{
    public int DonationId { get; set; }
    public int DonorId { get; set; }  // Foreign Key from Donor
    public DateTime DonationDate { get; set; }
    public decimal BloodAmount { get; set; }  // Amount of blood donated in liters
    public int? DonationCenterId { get; set; }  // Foreign Key from DonationCenter (optional)

    // Navigation Properties
    public Donor Donor { get; set; }
    public DonationCenter DonationCenter { get; set; }
}
```

#### **DonationCenter.cs**
This optional entity represents where blood donations take place.

```csharp
public class DonationCenter
{
    public int DonationCenterId { get; set; }
    public string Name { get; set; }
    public string Location { get; set; }

    // Navigation Properties
    public ICollection<Donation> Donations { get; set; }
}
```

---

### 2. **DbContext Configuration**

Here is the **DbContext** for the Donor Service, which integrates all the models. You would use **Entity Framework Core** to configure the relationships between entities and the database tables.

#### **DonorDbContext.cs**

```csharp
using Microsoft.EntityFrameworkCore;

public class DonorDbContext : DbContext
{
    public DonorDbContext(DbContextOptions<DonorDbContext> options) : base(options)
    {
    }

    // DbSets for each entity
    public DbSet<User> Users { get; set; }
    public DbSet<Role> Roles { get; set; }
    public DbSet<Donor> Donors { get; set; }
    public DbSet<BloodType> BloodTypes { get; set; }
    public DbSet<HealthStatus> HealthStatuses { get; set; }
    public DbSet<Donation> Donations { get; set; }
    public DbSet<DonationCenter> DonationCenters { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Configure User-Donor one-to-one relationship
        modelBuilder.Entity<User>()
            .HasOne(u => u.Donor)
            .WithOne(d => d.User)
            .HasForeignKey<Donor>(d => d.UserId);

        // Configure Role relationship
        modelBuilder.Entity<Role>()
            .HasMany(r => r.Users)
            .WithOne(u => u.Role)
            .HasForeignKey(u => u.RoleId);

        // Configure Donor relationships
        modelBuilder.Entity<Donor>()
            .HasOne(d => d.BloodType)
            .WithMany(bt => bt.Donors)
            .HasForeignKey(d => d.BloodTypeId);

        modelBuilder.Entity<Donor>()
            .HasOne(d => d.HealthStatus)
            .WithMany(hs => hs.Donors)
            .HasForeignKey(d => d.HealthStatusId);

        // Configure Donation relationships
        modelBuilder.Entity<Donation>()
            .HasOne(d => d.Donor)
            .WithMany(dn => dn.Donations)
            .HasForeignKey(d => d.DonorId);

        modelBuilder.Entity<Donation>()
            .HasOne(d => d.DonationCenter)
            .WithMany(dc => dc.Donations)
            .HasForeignKey(d => d.DonationCenterId);

        // Seed roles (optional)
        modelBuilder.Entity<Role>().HasData(
            new Role { RoleId = 1, Name = "Admin" },
            new Role { RoleId = 2, Name = "Donor" },
            new Role { RoleId = 3, Name = "Staff" }
        );
    }
}
```

---

### 3. **Repository Pattern (Optional but Common)**

For better code structure, you can implement the repository pattern for data access. Here's a brief repository example for the `Donor` entity.

#### **IDonorRepository.cs**
```csharp
public interface IDonorRepository
{
    Task<IEnumerable<Donor>> GetAllDonorsAsync();
    Task<Donor> GetDonorByIdAsync(int donorId);
    Task AddDonorAsync(Donor donor);
    Task UpdateDonorAsync(Donor donor);
    Task DeleteDonorAsync(int donorId);
}
```

#### **DonorRepository.cs**
```csharp
public class DonorRepository : IDonorRepository
{
    private readonly DonorDbContext _context;

    public DonorRepository(DonorDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<Donor>> GetAllDonorsAsync()
    {
        return await _context.Donors.Include(d => d.User)
                                    .Include(d => d.BloodType)
                                    .Include(d => d.HealthStatus)
                                    .ToListAsync();
    }

    public async Task<Donor> GetDonorByIdAsync(int donorId)
    {
        return await _context.Donors.Include(d => d.User)
                                    .Include(d => d.BloodType)
                                    .Include(d => d.HealthStatus)
                                    .FirstOrDefaultAsync(d => d.DonorId == donorId);
    }

    public async Task AddDonorAsync(Donor donor)
    {
        await _context.Donors.AddAsync(donor);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateDonorAsync(Donor donor)
    {
        _context.Donors.Update(donor);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteDonorAsync(int donorId)
    {
        var donor = await _context.Donors.FindAsync(donorId);
        if (donor != null)
        {
            _context.Donors.Remove(donor);
            await _context.SaveChangesAsync();
        }
    }
}
```

---

### Conclusion

This implementation includes the **Donor Service models** and a **DbContext** that manages relationships between entities. You can extend this by using the **Repository Pattern** for better code management and separation of concerns. This setup provides a solid foundation for implementing CRUD operations and business logic for donors in your **Blood Bank Management System**.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

To implement all APIs for the **Donor Service** using **.NET Core Web API** with **Entity Framework Core**, we will create a controller that handles the CRUD operations (Create, Read, Update, Delete) for donors. These APIs will also allow you to interact with donors, donations, and related entities like blood types and health statuses.

### 1. **Startup Configuration (Donor Service)**

Before implementing the APIs, ensure that the **Startup.cs** (or **Program.cs** in .NET 6 and later) is properly configured to support Entity Framework, dependency injection, and routing.

#### **Startup.cs** (For .NET Core 5 or below)
```csharp
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        // Add DbContext
        services.AddDbContext<DonorDbContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

        // Register the repository
        services.AddScoped<IDonorRepository, DonorRepository>();

        // Add controllers
        services.AddControllers();

        // Swagger for API documentation
        services.AddSwaggerGen();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        // Enable Swagger
        app.UseSwagger();
        app.UseSwaggerUI(c => 
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json", "Donor API V1");
        });

        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}
```

Ensure that the `appsettings.json` file contains the correct database connection string:

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=YOUR_SERVER_NAME;Database=DonorServiceDb;Trusted_Connection=True;"
  }
}
```

### 2. **Donor Controller Implementation**

Create a controller that will handle all CRUD operations related to the **Donor** service.

#### **DonorController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class DonorController : ControllerBase
{
    private readonly IDonorRepository _donorRepository;

    public DonorController(IDonorRepository donorRepository)
    {
        _donorRepository = donorRepository;
    }

    // GET: api/donor
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Donor>>> GetAllDonors()
    {
        var donors = await _donorRepository.GetAllDonorsAsync();
        return Ok(donors);
    }

    // GET: api/donor/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<Donor>> GetDonorById(int id)
    {
        var donor = await _donorRepository.GetDonorByIdAsync(id);
        if (donor == null)
        {
            return NotFound();
        }
        return Ok(donor);
    }

    // POST: api/donor
    [HttpPost]
    public async Task<ActionResult<Donor>> CreateDonor([FromBody] Donor donor)
    {
        if (donor == null)
        {
            return BadRequest();
        }

        await _donorRepository.AddDonorAsync(donor);
        return CreatedAtAction(nameof(GetDonorById), new { id = donor.DonorId }, donor);
    }

    // PUT: api/donor/{id}
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateDonor(int id, [FromBody] Donor donor)
    {
        if (id != donor.DonorId)
        {
            return BadRequest();
        }

        var existingDonor = await _donorRepository.GetDonorByIdAsync(id);
        if (existingDonor == null)
        {
            return NotFound();
        }

        await _donorRepository.UpdateDonorAsync(donor);
        return NoContent();
    }

    // DELETE: api/donor/{id}
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteDonor(int id)
    {
        var donor = await _donorRepository.GetDonorByIdAsync(id);
        if (donor == null)
        {
            return NotFound();
        }

        await _donorRepository.DeleteDonorAsync(id);
        return NoContent();
    }
}
```

### 3. **Additional APIs for BloodType and HealthStatus**

These additional controllers will provide APIs to manage the **BloodType** and **HealthStatus** entities.

#### **BloodTypeController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class BloodTypeController : ControllerBase
{
    private readonly DonorDbContext _context;

    public BloodTypeController(DonorDbContext context)
    {
        _context = context;
    }

    // GET: api/bloodtype
    [HttpGet]
    public async Task<ActionResult<IEnumerable<BloodType>>> GetAllBloodTypes()
    {
        return await _context.BloodTypes.ToListAsync();
    }

    // GET: api/bloodtype/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<BloodType>> GetBloodTypeById(int id)
    {
        var bloodType = await _context.BloodTypes.FindAsync(id);
        if (bloodType == null)
        {
            return NotFound();
        }
        return Ok(bloodType);
    }

    // POST: api/bloodtype
    [HttpPost]
    public async Task<ActionResult<BloodType>> CreateBloodType([FromBody] BloodType bloodType)
    {
        _context.BloodTypes.Add(bloodType);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetBloodTypeById), new { id = bloodType.BloodTypeId }, bloodType);
    }
}
```

#### **HealthStatusController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class HealthStatusController : ControllerBase
{
    private readonly DonorDbContext _context;

    public HealthStatusController(DonorDbContext context)
    {
        _context = context;
    }

    // GET: api/healthstatus
    [HttpGet]
    public async Task<ActionResult<IEnumerable<HealthStatus>>> GetAllHealthStatuses()
    {
        return await _context.HealthStatuses.ToListAsync();
    }

    // GET: api/healthstatus/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<HealthStatus>> GetHealthStatusById(int id)
    {
        var healthStatus = await _context.HealthStatuses.FindAsync(id);
        if (healthStatus == null)
        {
            return NotFound();
        }
        return Ok(healthStatus);
    }

    // POST: api/healthstatus
    [HttpPost]
    public async Task<ActionResult<HealthStatus>> CreateHealthStatus([FromBody] HealthStatus healthStatus)
    {
        _context.HealthStatuses.Add(healthStatus);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetHealthStatusById), new { id = healthStatus.HealthStatusId }, healthStatus);
    }
}
```

### 4. **Donation API**

The donation API manages blood donations made by the donors.

#### **DonationController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class DonationController : ControllerBase
{
    private readonly DonorDbContext _context;

    public DonationController(DonorDbContext context)
    {
        _context = context;
    }

    // GET: api/donation
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Donation>>> GetAllDonations()
    {
        return await _context.Donations.Include(d => d.Donor)
                                       .Include(d => d.DonationCenter)
                                       .ToListAsync();
    }

    // GET: api/donation/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<Donation>> GetDonationById(int id)
    {
        var donation = await _context.Donations.Include(d => d.Donor)
                                               .Include(d => d.DonationCenter)
                                               .FirstOrDefaultAsync(d => d.DonationId == id);
        if (donation == null)
        {
            return NotFound();
        }
        return Ok(donation);
    }

    // POST: api/donation
    [HttpPost]
    public async Task<ActionResult<Donation>> CreateDonation([FromBody] Donation donation)
    {
        _context.Donations.Add(donation);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetDonationById), new { id = donation.DonationId }, donation);
    }

    // PUT: api/donation/{id}
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateDonation(int id, [FromBody] Donation donation)
    {
        if (id != donation.DonationId)
        {
            return BadRequest();
        }

        _context.Entry(donation).State = EntityState.Modified;
        await _context.SaveChangesAsync();
        return NoContent();
    }

    // DELETE: api/donation/{id}
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteDonation(int id)
    {
        var donation = await _context.Donations.FindAsync(id);
        if (donation == null)
        {
            return NotFound();
        }

        _context.Donations.Remove(donation);
        await _context.SaveChangesAsync

();
        return NoContent();
    }
}
```

### 5. **Swagger Integration**

To easily test and document your APIs, make sure **Swagger** is enabled in the **Startup.cs**:

```csharp
app.UseSwagger();
app.UseSwaggerUI(c => 
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Donor API V1");
});
```

Then, when you run the application, you can navigate to `/swagger` to view and test all the available APIs.

### 6. **Testing the APIs**

Once your APIs are implemented, you can test them using tools like **Postman**, **Swagger UI**, or directly with a frontend app. Ensure that the following functionalities are covered:
- CRUD operations for Donors.
- CRUD operations for Blood Types, Health Statuses, and Donations.
  
Each API endpoint will allow you to manage and interact with donor-related data.

---

### Conclusion

This solution implements all APIs for the **Donor Service**, managing donors, donations, blood types, and health statuses. It follows a clean architecture with repository patterns, separating concerns and providing a solid base for the **Blood Bank Management System**. You can extend this with JWT authentication, proper validation, and more advanced features such as logging and exception handling.
