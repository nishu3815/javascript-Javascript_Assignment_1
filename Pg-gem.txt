using Org.BouncyCastle.Bcpg;
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Security;

namespace PgpEncryptionApp
{
    class Program
    {
        static void Main(string[] args)
        {
            string userId = "anonymous";
            string passphrase = "securepassphrase";

            // Generate PGP Keys
            var (publicKey, privateKey) = GeneratePgpKeys(userId, passphrase);
            Console.WriteLine("PGP Keys generated.");

            // Sample file to encrypt
            string inputFilePath = @"C:\Users\nishukumari\Documents\input.txt";
            
            byte[] messageBytes = File.ReadAllBytes(inputFilePath); 

            // Encrypt the message with the public key
            byte[] encryptedMessage = EncryptPgpMessage(publicKey, messageBytes);
            Console.WriteLine("Message encrypted.");
            string encryptedFilePath = @"C:\Users\nishukumari\Documents\Encrypted\encrypted1";
            File.WriteAllBytes(encryptedFilePath, encryptedMessage);

            // Decrypt the message with the private key
            string decryptedFilePath = @"C:\Users\nishukumari\Documents\Decrypted\decrypted1.txt";
            byte[] decryptedMessage = DecryptPgpMessage(privateKey, encryptedMessage, passphrase);
            File.WriteAllBytes(decryptedFilePath, decryptedMessage);
            string decryptedText = System.Text.Encoding.UTF8.GetString(decryptedMessage);
            Console.WriteLine("Decrypted message: " + decryptedText);
        }

        // Method to Generate PGP Key Pair
        public static (string publicKey, string privateKey) GeneratePgpKeys(string userId, string passphrase)
        {
            var generator = new RsaKeyPairGenerator();
            generator.Init(new KeyGenerationParameters(new SecureRandom(), 2048));
            AsymmetricCipherKeyPair keyPair = generator.GenerateKeyPair();

            using var publicKeyStream = new MemoryStream();
            using var privateKeyStream = new MemoryStream();

            // Generate key ring generator
            var keyRingGenerator = new PgpKeyRingGenerator(
                PgpSignature.DefaultCertification,
                new PgpKeyPair(PublicKeyAlgorithmTag.RsaGeneral, keyPair, DateTime.UtcNow),
                userId,
                SymmetricKeyAlgorithmTag.Aes256,
                passphrase.ToCharArray(),
                false,
                null,
                null,
                new SecureRandom()
            );


            string privateKeyFilePath = @"C:\Users\nishukumari\Documents\Encrypted\input1_txt_privateKey.asc";
            string publicKeyFilePath = @"C:\Users\nishukumari\Documents\Encrypted\input1_txt_publicKey.asc";


            // Export public key
            keyRingGenerator.GeneratePublicKeyRing().Encode(publicKeyStream);
            var publicKey = Convert.ToBase64String(publicKeyStream.ToArray());
            File.WriteAllText(publicKeyFilePath, publicKey);

            // Export private key
            keyRingGenerator.GenerateSecretKeyRing().Encode(privateKeyStream);
            var privateKey = Convert.ToBase64String(privateKeyStream.ToArray());
            File.WriteAllText(privateKeyFilePath, privateKey);

            return (publicKey, privateKey);

        }

       

        // Method to Encrypt a Message
        public static byte[] EncryptPgpMessage(string publicKeyBase64, byte[] messageBytes)
        {
            byte[] publicKeyBytes = Convert.FromBase64String(publicKeyBase64);

            using var inputStream = new MemoryStream(publicKeyBytes);
            using var outputStream = new MemoryStream();
            var publicKeyRing = new PgpPublicKeyRing(inputStream);
            var encryptionKey = publicKeyRing.GetPublicKey();

            var encryptedDataGenerator = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Aes256, new SecureRandom());
            encryptedDataGenerator.AddMethod(encryptionKey);

            using (var encryptedOut = encryptedDataGenerator.Open(outputStream, messageBytes.Length))
            {
                encryptedOut.Write(messageBytes, 0, messageBytes.Length);
            }

            return outputStream.ToArray();
        }

        // Method to Decrypt a Message
        public static byte[] DecryptPgpMessage(string privateKeyBase64, byte[] encryptedBytes, string passphrase)
        {
            byte[] privateKeyBytes = Convert.FromBase64String(privateKeyBase64);

            using var privateKeyStream = new MemoryStream(privateKeyBytes);
            using var encryptedStream = new MemoryStream(encryptedBytes);
            var pgpPrivateKeyRing = new PgpSecretKeyRing(privateKeyStream);
            PgpSecretKey secretKey = pgpPrivateKeyRing.GetSecretKey();
            PgpPrivateKey privateKey = secretKey.ExtractPrivateKey(passphrase.ToCharArray());

            var encDataList = new PgpObjectFactory(PgpUtilities.GetDecoderStream(encryptedStream)).NextPgpObject() as PgpEncryptedDataList;
            var encData = (PgpPublicKeyEncryptedData)encDataList[0];

            using var decryptedStream = encData.GetDataStream(privateKey);
            using var decryptedOutput = new MemoryStream();
            decryptedStream.CopyTo(decryptedOutput);

            return decryptedOutput.ToArray();
        }
    }
}

,,,, , ,,,,,,,, 

To generate a **PGP private key** where changing a single character renders the key invalid, while adhering to a key strength of 2048 bits, we need to use the OpenPGP standard with libraries like **BouncyCastle**. Here's how to achieve this:

---

### **PGP Key Requirements**
1. **Key Type**: RSA.
2. **Key Strength**: 2048 bits.
3. **Format**: ASCII-armored PGP private key (readable text).
4. **Integrity**: Changing a single character or bit will invalidate the key because OpenPGP keys are cryptographically signed.

---

### **Code to Generate PGP Key Pair**
Here is the updated code using **BouncyCastle** to generate a PGP key pair that meets the requirements:

#### **Install NuGet Package**
```bash
dotnet add package Portable.BouncyCastle
```

#### **Code**
```csharp
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Security;
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string identity = "Your Name <your.email@example.com>";
        string passphrase = "secure-passphrase";

        // Generate the PGP key pair
        var keyPair = GeneratePgpKeyPair(identity, passphrase);

        // Save the private key
        File.WriteAllText("pgp_private.asc", keyPair.PrivateKey);
        Console.WriteLine("Private key saved to pgp_private.asc");

        // Save the public key
        File.WriteAllText("pgp_public.asc", keyPair.PublicKey);
        Console.WriteLine("Public key saved to pgp_public.asc");

        // Modify the private key slightly and validate
        Console.WriteLine("Testing key modification...");
        string modifiedPrivateKey = keyPair.PrivateKey.Replace("A", "B"); // Change one character
        try
        {
            ValidatePgpKey(modifiedPrivateKey, passphrase);
            Console.WriteLine("Modified key is still valid (unexpected).");
        }
        catch
        {
            Console.WriteLine("Modified key is invalid (expected).");
        }
    }

    static (string PrivateKey, string PublicKey) GeneratePgpKeyPair(string identity, string passphrase)
    {
        // Create RSA key pair generator
        var keyRingGenerator = GenerateKeyRingGenerator(identity, passphrase);

        // Export private key
        string privateKey;
        using (var privateKeyStream = new StringWriter())
        {
            keyRingGenerator.GenerateSecretKeyRing().Encode(new ArmoredOutputStream(privateKeyStream));
            privateKey = privateKeyStream.ToString();
        }

        // Export public key
        string publicKey;
        using (var publicKeyStream = new StringWriter())
        {
            keyRingGenerator.GeneratePublicKeyRing().Encode(new ArmoredOutputStream(publicKeyStream));
            publicKey = publicKeyStream.ToString();
        }

        return (privateKey, publicKey);
    }

    static PgpKeyRingGenerator GenerateKeyRingGenerator(string identity, string passphrase)
    {
        // Create RSA key pair
        var rsaGenerator = GeneratorUtilities.GetKeyPairGenerator("RSA");
        rsaGenerator.Init(new KeyGenerationParameters(new SecureRandom(), 2048));
        var keyPair = rsaGenerator.GenerateKeyPair();

        // Create key ring generator
        return new PgpKeyRingGenerator(
            PgpSignature.DefaultCertification,
            keyPair.Public,
            identity,
            SymmetricKeyAlgorithmTag.Aes256,
            passphrase.ToCharArray(),
            true,
            null,
            null,
            new SecureRandom()
        );
    }

    static void ValidatePgpKey(string privateKey, string passphrase)
    {
        using (var privateKeyStream = new StringReader(privateKey))
        {
            var decoderStream = PgpUtilities.GetDecoderStream(privateKeyStream);
            var secretKeyRing = new PgpSecretKeyRing(decoderStream);
            var secretKey = secretKeyRing.GetSecretKey();
            var privateKeyObj = secretKey.ExtractPrivateKey(passphrase.ToCharArray());
            if (privateKeyObj == null)
                throw new Exception("Invalid key or passphrase.");
        }
    }
}
```

---

### **Explanation**
1. **Key Generation**:
   - Uses RSA with 2048-bit strength.
   - Generates a PGP key pair (private and public keys).

2. **Private and Public Keys**:
   - The private key is ASCII-armored (Base64 with headers like `BEGIN PGP PRIVATE KEY`).
   - A passphrase protects the private key.

3. **Validation**:
   - The code attempts to validate the private key by loading and extracting it.
   - If the private key is modified (even slightly), the cryptographic signature check will fail, making the key invalid.

4. **Output**:
   - `pgp_private.asc`: The private key file.
   - `pgp_public.asc`: The public key file.

5. **Key Modification Test**:
   - The code demonstrates that modifying the private key invalidates it by replacing a single character.

---

### **Run and Test**
1. Compile and run the code.
2. Open the `pgp_private.asc` file and note the key.
3. Modify one character manually or programmatically and rerun the validation logic to see it fail.

---

### **Why Single-Character Change Invalidates the Key**
- OpenPGP keys are cryptographically signed and encoded. Any change in the key data invalidates the checksum, rendering it unusable.
- RSA keys rely on precise mathematical relationships. Altering even one bit breaks the decryption and signing capabilities of the key.

Let me know if you need further details or assistance!

