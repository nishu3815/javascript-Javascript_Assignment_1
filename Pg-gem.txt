using Org.BouncyCastle.Bcpg;
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Security;

namespace PgpEncryptionApp
{
    class Program
    {
        static void Main(string[] args)
        {
            string userId = "anonymous";
            string passphrase = "securepassphrase";

            // Generate PGP Keys
            var (publicKey, privateKey) = GeneratePgpKeys(userId, passphrase);
            Console.WriteLine("PGP Keys generated.");

            // Sample file to encrypt
            string inputFilePath = @"C:\Users\nishukumari\Documents\input.txt";
            
            byte[] messageBytes = File.ReadAllBytes(inputFilePath); 

            // Encrypt the message with the public key
            byte[] encryptedMessage = EncryptPgpMessage(publicKey, messageBytes);
            Console.WriteLine("Message encrypted.");
            string encryptedFilePath = @"C:\Users\nishukumari\Documents\Encrypted\encrypted1";
            File.WriteAllBytes(encryptedFilePath, encryptedMessage);

            // Decrypt the message with the private key
            string decryptedFilePath = @"C:\Users\nishukumari\Documents\Decrypted\decrypted1.txt";
            byte[] decryptedMessage = DecryptPgpMessage(privateKey, encryptedMessage, passphrase);
            File.WriteAllBytes(decryptedFilePath, decryptedMessage);
            string decryptedText = System.Text.Encoding.UTF8.GetString(decryptedMessage);
            Console.WriteLine("Decrypted message: " + decryptedText);
        }

        // Method to Generate PGP Key Pair
        public static (string publicKey, string privateKey) GeneratePgpKeys(string userId, string passphrase)
        {
            var generator = new RsaKeyPairGenerator();
            generator.Init(new KeyGenerationParameters(new SecureRandom(), 2048));
            AsymmetricCipherKeyPair keyPair = generator.GenerateKeyPair();

            using var publicKeyStream = new MemoryStream();
            using var privateKeyStream = new MemoryStream();

            // Generate key ring generator
            var keyRingGenerator = new PgpKeyRingGenerator(
                PgpSignature.DefaultCertification,
                new PgpKeyPair(PublicKeyAlgorithmTag.RsaGeneral, keyPair, DateTime.UtcNow),
                userId,
                SymmetricKeyAlgorithmTag.Aes256,
                passphrase.ToCharArray(),
                false,
                null,
                null,
                new SecureRandom()
            );


            string privateKeyFilePath = @"C:\Users\nishukumari\Documents\Encrypted\input1_txt_privateKey.asc";
            string publicKeyFilePath = @"C:\Users\nishukumari\Documents\Encrypted\input1_txt_publicKey.asc";


            // Export public key
            keyRingGenerator.GeneratePublicKeyRing().Encode(publicKeyStream);
            var publicKey = Convert.ToBase64String(publicKeyStream.ToArray());
            File.WriteAllText(publicKeyFilePath, publicKey);

            // Export private key
            keyRingGenerator.GenerateSecretKeyRing().Encode(privateKeyStream);
            var privateKey = Convert.ToBase64String(privateKeyStream.ToArray());
            File.WriteAllText(privateKeyFilePath, privateKey);

            return (publicKey, privateKey);

        }

       

        // Method to Encrypt a Message
        public static byte[] EncryptPgpMessage(string publicKeyBase64, byte[] messageBytes)
        {
            byte[] publicKeyBytes = Convert.FromBase64String(publicKeyBase64);

            using var inputStream = new MemoryStream(publicKeyBytes);
            using var outputStream = new MemoryStream();
            var publicKeyRing = new PgpPublicKeyRing(inputStream);
            var encryptionKey = publicKeyRing.GetPublicKey();

            var encryptedDataGenerator = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Aes256, new SecureRandom());
            encryptedDataGenerator.AddMethod(encryptionKey);

            using (var encryptedOut = encryptedDataGenerator.Open(outputStream, messageBytes.Length))
            {
                encryptedOut.Write(messageBytes, 0, messageBytes.Length);
            }

            return outputStream.ToArray();
        }

        // Method to Decrypt a Message
        public static byte[] DecryptPgpMessage(string privateKeyBase64, byte[] encryptedBytes, string passphrase)
        {
            byte[] privateKeyBytes = Convert.FromBase64String(privateKeyBase64);

            using var privateKeyStream = new MemoryStream(privateKeyBytes);
            using var encryptedStream = new MemoryStream(encryptedBytes);
            var pgpPrivateKeyRing = new PgpSecretKeyRing(privateKeyStream);
            PgpSecretKey secretKey = pgpPrivateKeyRing.GetSecretKey();
            PgpPrivateKey privateKey = secretKey.ExtractPrivateKey(passphrase.ToCharArray());

            var encDataList = new PgpObjectFactory(PgpUtilities.GetDecoderStream(encryptedStream)).NextPgpObject() as PgpEncryptedDataList;
            var encData = (PgpPublicKeyEncryptedData)encDataList[0];

            using var decryptedStream = encData.GetDataStream(privateKey);
            using var decryptedOutput = new MemoryStream();
            decryptedStream.CopyTo(decryptedOutput);

            return decryptedOutput.ToArray();
        }
    }
}
