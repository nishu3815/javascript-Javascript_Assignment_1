To implement the **Hospital Service** as part of the Blood Bank Management System, we will use **ASP.NET Core**, **Entity Framework Core**, and **MS SQL Server** with the **Repository Pattern**. This service will handle operations related to hospital registration, updating hospital details, and fetching hospital information.

### Step 1: **Define Entities**

#### **Hospital Entity**

We need to define a `Hospital` entity that will store information about hospitals registered in the system.

```csharp
public class Hospital
{
    public int HospitalId { get; set; }
    public string Name { get; set; }
    public string Address { get; set; }
    public string City { get; set; }
    public string Phone { get; set; }
    public string Email { get; set; }

    public virtual ICollection<BloodRequest> BloodRequests { get; set; }
}
```

The `BloodRequests` property will establish the relationship between a hospital and its blood requests.

### Step 2: **DbContext for Hospital Service**

Create a new `HospitalDbContext` to manage hospital-related entities and operations:

```csharp
using Microsoft.EntityFrameworkCore;

public class HospitalDbContext : DbContext
{
    public HospitalDbContext(DbContextOptions<HospitalDbContext> options) : base(options) { }

    public DbSet<Hospital> Hospitals { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Add any custom configurations or relationships if necessary
    }
}
```

### Step 3: **Define Repositories**

#### **IRepository Interface (Generic Repository)**

The generic repository interface is reusable for any entity.

```csharp
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;

public interface IRepository<T> where T : class
{
    Task<IEnumerable<T>> GetAllAsync();
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
    Task AddAsync(T entity);
    void Update(T entity);
    void Delete(T entity);
    Task SaveAsync();
}
```

#### **IHospitalRepository Interface**

The `IHospitalRepository` will define additional methods specific to the `Hospital` entity if necessary.

```csharp
public interface IHospitalRepository : IRepository<Hospital>
{
    Task<Hospital> GetHospitalByNameAsync(string name);
}
```

#### **HospitalRepository Implementation**

Implement the `HospitalRepository` class that interacts with the `HospitalDbContext`:

```csharp
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class HospitalRepository : GenericRepository<Hospital>, IHospitalRepository
{
    private readonly HospitalDbContext _context;

    public HospitalRepository(HospitalDbContext context) : base(context)
    {
        _context = context;
    }

    public async Task<Hospital> GetHospitalByNameAsync(string name)
    {
        return await _context.Hospitals
                             .Where(h => h.Name.ToLower() == name.ToLower())
                             .FirstOrDefaultAsync();
    }
}
```

#### **GenericRepository Implementation**

The `GenericRepository` is used to handle the common operations (CRUD).

```csharp
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

public class GenericRepository<T> : IRepository<T> where T : class
{
    protected readonly HospitalDbContext _context;
    private readonly DbSet<T> _dbSet;

    public GenericRepository(HospitalDbContext context)
    {
        _context = context;
        _dbSet = context.Set<T>();
    }

    public async Task<IEnumerable<T>> GetAllAsync()
    {
        return await _dbSet.ToListAsync();
    }

    public async Task<T> GetByIdAsync(int id)
    {
        return await _dbSet.FindAsync(id);
    }

    public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)
    {
        return await _dbSet.Where(predicate).ToListAsync();
    }

    public async Task AddAsync(T entity)
    {
        await _dbSet.AddAsync(entity);
    }

    public void Update(T entity)
    {
        _dbSet.Attach(entity);
        _context.Entry(entity).State = EntityState.Modified;
    }

    public void Delete(T entity)
    {
        _dbSet.Remove(entity);
    }

    public async Task SaveAsync()
    {
        await _context.SaveChangesAsync();
    }
}
```

### Step 4: **Controller Implementation**

The controller will expose the endpoints for managing hospitals.

#### **HospitalController**

```csharp
[Route("api/[controller]")]
[ApiController]
public class HospitalController : ControllerBase
{
    private readonly IHospitalRepository _hospitalRepository;

    public HospitalController(IHospitalRepository hospitalRepository)
    {
        _hospitalRepository = hospitalRepository;
    }

    // GET: api/hospital
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Hospital>>> GetAllHospitals()
    {
        var hospitals = await _hospitalRepository.GetAllAsync();
        return Ok(hospitals);
    }

    // GET: api/hospital/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<Hospital>> GetHospitalById(int id)
    {
        var hospital = await _hospitalRepository.GetByIdAsync(id);
        if (hospital == null)
        {
            return NotFound();
        }
        return Ok(hospital);
    }

    // GET: api/hospital/name/{name}
    [HttpGet("name/{name}")]
    public async Task<ActionResult<Hospital>> GetHospitalByName(string name)
    {
        var hospital = await _hospitalRepository.GetHospitalByNameAsync(name);
        if (hospital == null)
        {
            return NotFound();
        }
        return Ok(hospital);
    }

    // POST: api/hospital
    [HttpPost]
    public async Task<ActionResult<Hospital>> RegisterHospital([FromBody] Hospital hospital)
    {
        await _hospitalRepository.AddAsync(hospital);
        await _hospitalRepository.SaveAsync();
        return CreatedAtAction(nameof(GetHospitalById), new { id = hospital.HospitalId }, hospital);
    }

    // PUT: api/hospital/{id}
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateHospital(int id, [FromBody] Hospital hospital)
    {
        if (id != hospital.HospitalId)
        {
            return BadRequest();
        }

        _hospitalRepository.Update(hospital);
        await _hospitalRepository.SaveAsync();

        return NoContent();
    }

    // DELETE: api/hospital/{id}
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteHospital(int id)
    {
        var hospital = await _hospitalRepository.GetByIdAsync(id);
        if (hospital == null)
        {
            return NotFound();
        }

        _hospitalRepository.Delete(hospital);
        await _hospitalRepository.SaveAsync();

        return NoContent();
    }
}
```

### Step 5: **Configure Dependency Injection**

Register the **DbContext** and **repositories** in **Startup.cs** or **Program.cs** for dependency injection:

```csharp
public void ConfigureServices(IServiceCollection services)
{
    // Register HospitalDbContext with SQL Server
    services.AddDbContext<HospitalDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

    // Register repositories
    services.AddScoped<IHospitalRepository, HospitalRepository>();

    // Add other services
    services.AddControllers();
    services.AddSwaggerGen();  // For Swagger UI
}
```

### Step 6: **Database Migrations**

If you are using **Entity Framework Core Migrations**, you can create and apply the migrations:

```bash
# Add a migration
dotnet ef migrations add AddHospitalEntity

# Update the database
dotnet ef database update
```

### Step 7: **Testing the APIs**

You can now use **Postman** or **Swagger UI** to test the following operations:

1. **Get all hospitals**: `GET /api/hospital`
2. **Get a specific hospital by ID**: `GET /api/hospital/{id}`
3. **Get a specific hospital by name**: `GET /api/hospital/name/{name}`
4. **Register a new hospital**: `POST /api/hospital`
5. **Update a hospital's details**: `PUT /api/hospital/{id}`
6. **Delete a hospital**: `DELETE /api/hospital/{id}`

### Conclusion

By following this approach, the **Hospital Service** for the Blood Bank Management System is implemented using **ASP.NET Core**, **Entity Framework Core**, **MS SQL Server**, and the **Repository Pattern**. The service enables the management of hospital registration, updates, and deletions while maintaining clean separation of concerns, making the codebase maintainable, reusable, and testable.
